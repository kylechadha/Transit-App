<!-- Required for geolocation tracking?? TBD -->
<html xmlns="http://www.w3.org/1999/xhtml">
<script>

// FIGURE THIS OUT:
var end_stop_lat = find_by(this.stop.lat);
var end_stop_lon = find_by(this.stop.lon);

var end_stop_geolocation[end_stop_lat, end_stop_lon];

// FROM EXAMPLE
function startTracking(end_stop_geolocation) {
// Clear position watch
  navigator.geolocation.clearWatch(watchPositionId);
// Start watching location
  watchPositionId = navigator.geolocation.watchPosition(show_rider_location, showError, { enableHighAccuracy: false, maximumAge: 60000, timeout: 30000 });
}

function showRiderLocation(position) {
  // From Example
  var currentDistance;
  currentDistance = calculateDistance(position.coords.latitude, position.coords.longitude...figure out what goes);
  var timestampDate = new Date(position.timestamp);
  // From Example: show geolocation results
  var geoloactionResults = "Position (latitude, longitude): " + position.coords.latitude + ', ' + position.coords.longitude;
}

function calculateDistance(latitude2, latitude1, longitude2,longitude1, alert_distance) {
// Calculate distance between end stop and current location - Haversine formula
  // FIGURE THIS OUT
  latitude2 = end_stop_lat = this.stop.lat;
  latitude1 = end_stop_lon = this.stop.lon;
  alert_distance = @alert.alert_distance;

  // FROM EXAMPLE
  var earthRadius = 3961.3; // Radius of the earth in miles
  var dLatitude = convertToRadian(latitude2 - latitude1);
  var dLongitude = convertToRadian(longitude2 - longitude1);
  var a = Math.sin(dLatitude / 2) * Math.sin(dLatitude / 2) + Math.cos(convertToRadian(latitude1)) * Math.cos(convertToRadian(latitude2)) * Math.sin(dLongitude / 2) * Math.sin(dLongitude / 2);
  var greatCircleDistance = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  var distance = earthRadius * greatCircleDistance; // distance converted to miles from radians
  return distance;

  // Check distance against alert_distance
  if (distance < alert_distance) {
    // PING
    // cancel watch
  };

}

</script>

<h2>Well hello there, you've reached the destination selection page!</h2>
<br>
<h4>Here's the route & direction that brought you here:</h4>
<h3>
  <strong><%= "Route #{@route.short_name}: #{@route.long_name}" %></strong>, heading <strong><%= @direction == "0" ? @route.inbound : @route.outbound %></strong>
</h3><br>

<h4>For that route, here's a random trip that satisfies our criteria of having the max number of stops. Feel free to check the direction_id matches, too!</h4>
Trip ID: <%= @trip.id %><br>
GTFS Trip ID: <%= @trip.gtfs_trip_id %><br>
Direction ID: <%= @trip.direction_id %><br><br>

<h4>Here's the closest stop on Route <%= @route.short_name %> towards <%= @direction == "0" ? @route.inbound : @route.outbound %>. We'll assume this is the one our passenger is starting on.</h4>

<p>**Pass lat lon from previous page as params**<br>Use to do an AREL query for stops where stop.routes = current route ID && stop.trips.direction_id = current direction (or perhaps stop.trip = selected trip)</p>
<%= params[:lat] %>
<%= params[:lon] %>




<br><br><br>

Filtered by the current route, determine the closest stop on that route
Find the matching stop ID on the trip.stoptime.sequence, then return the sequence
<br>
Increment sequence, and return the stop id so you have a list of stop IDs
Then show the stop names for each of those stop IDs